/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Cliente;
import java.util.List;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-08-12T19:39:06.828Z")

@Api(value = "usuario", description = "the usuario API")
@RequestMapping(value = "/v2")
public interface UsuarioApi {

    @ApiOperation(value = "Create user", nickname = "createusuario", notes = "This can only be done by the logged in user.", tags={ "usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/usuario",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createusuario(@ApiParam(value = "Created user object" ,required=true )  @Valid @RequestBody Cliente body);


    @ApiOperation(value = "Creates list of users with given input array", nickname = "createusuariosWithArrayInput", notes = "", tags={ "usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/usuario/createWithArray",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createusuariosWithArrayInput(@ApiParam(value = "List of user object" ,required=true )  @Valid @RequestBody List<Cliente> body);


    @ApiOperation(value = "Creates list of users with given input array", nickname = "createusuariosWithListInput", notes = "", tags={ "usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/usuario/createWithList",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createusuariosWithListInput(@ApiParam(value = "List of user object" ,required=true )  @Valid @RequestBody List<Cliente> body);


    @ApiOperation(value = "Delete user", nickname = "deleteusuario", notes = "This can only be done by the logged in user.", tags={ "usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid nome supplied"),
        @ApiResponse(code = 404, message = "usuario not found") })
    @RequestMapping(value = "/usuario/{nome}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteusuario(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("nome") String nome);


    @ApiOperation(value = "Get user by user name", nickname = "getusuarioByName", notes = "", response = Cliente.class, tags={ "usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Cliente.class),
        @ApiResponse(code = 400, message = "Invalid nome supplied"),
        @ApiResponse(code = 404, message = "usuario not found") })
    @RequestMapping(value = "/usuario/{nome}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Cliente> getusuarioByName(@ApiParam(value = "The name that needs to be fetched. Use user1 for testing. ",required=true) @PathVariable("nome") String nome);


    @ApiOperation(value = "Updated user", nickname = "updateusuario", notes = "This can only be done by the logged in user.", tags={ "usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid user supplied"),
        @ApiResponse(code = 404, message = "usuario not found") })
    @RequestMapping(value = "/usuario/{nome}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateusuario(@ApiParam(value = "name that need to be updated",required=true) @PathVariable("nome") String nome,@ApiParam(value = "Updated user object" ,required=true )  @Valid @RequestBody Cliente body);

}
