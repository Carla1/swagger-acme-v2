/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Endereco;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-08-12T19:39:06.828Z")

@Api(value = "endereco", description = "the endereco API")
@RequestMapping(value = "/v2")
public interface EnderecoApi {

    @ApiOperation(value = "Adicionar novo endereco", nickname = "addEndereco", notes = "", authorizations = {
        @Authorization(value = "acme_auth", scopes = {
            @AuthorizationScope(scope = "write:acme", description = "modificar dados"),
            @AuthorizationScope(scope = "read:acme", description = "ler dados")
            })
    }, tags={ "endereco", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/endereco",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addEndereco(@ApiParam(value = "Endereco a ser adicionado" ,required=true )  @Valid @RequestBody Endereco body);


    @ApiOperation(value = "Exclui endereco", nickname = "deleteEndereco", notes = "", authorizations = {
        @Authorization(value = "acme_auth", scopes = {
            @AuthorizationScope(scope = "write:acme", description = "modificar dados"),
            @AuthorizationScope(scope = "read:acme", description = "ler dados")
            })
    }, tags={ "endereco", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Endereco not found") })
    @RequestMapping(value = "/endereco/{enderecoId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEndereco(@ApiParam(value = "endereco id to delete",required=true) @PathVariable("enderecoId") Long enderecoId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "Endereco por ID", nickname = "getEnderecoById", notes = "Returns a single pet", response = Endereco.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "endereco", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Endereco.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Fatura not found") })
    @RequestMapping(value = "/endereco/{enderecoId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Endereco> getEnderecoById(@ApiParam(value = "ID of pet to return",required=true) @PathVariable("enderecoId") Long enderecoId);


    @ApiOperation(value = "Atualiza endereco", nickname = "updateEndereco", notes = "", authorizations = {
        @Authorization(value = "acme_auth", scopes = {
            @AuthorizationScope(scope = "write:acme", description = "modificar dados"),
            @AuthorizationScope(scope = "read:acme", description = "ler dados")
            })
    }, tags={ "endereco", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Endereco not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/endereco",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateEndereco(@ApiParam(value = "Endereco" ,required=true )  @Valid @RequestBody Endereco body);


    @ApiOperation(value = "Atualiza endereco", nickname = "updateEnderecoWithForm", notes = "", authorizations = {
        @Authorization(value = "acme_auth", scopes = {
            @AuthorizationScope(scope = "write:acme", description = "modificar dados"),
            @AuthorizationScope(scope = "read:acme", description = "ler dados")
            })
    }, tags={ "endereco", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/endereco/{enderecoId}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateEnderecoWithForm(@ApiParam(value = "Id",required=true) @PathVariable("enderecoId") Long enderecoId,@ApiParam(value = "cidade") @RequestParam(value="cidade", required=false)  String cidade);

}
